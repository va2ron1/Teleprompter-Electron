'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileExists = exports.remove = exports.mkdirs = exports.rename = exports.unlink = exports.readDir = exports.readFile = exports.copy = undefined;

var _bluebird = require('bluebird');

let fileExists = exports.fileExists = (() => {
  var ref = (0, _bluebird.coroutine)(function* (file) {
    let stats;

    try {
      stats = yield inspect(file);
      return stats.isFile();
    } catch (err) {
      log(err);
    }

    return false;
  });
  return function fileExists(_x) {
    return ref.apply(this, arguments);
  };
})();

var _fsExtra = require('fs-extra');

var fs = _interopRequireWildcard(_fsExtra);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const log = require('debug')('electron-windows-installer:fs-utils');

const copy = exports.copy = _bluebird.Promise.promisify(fs.copy);
const readFile = exports.readFile = _bluebird.Promise.promisify(fs.readFile);
const readDir = exports.readDir = _bluebird.Promise.promisify(fs.readdir);
const unlink = exports.unlink = _bluebird.Promise.promisify(fs.unlink);
const rename = exports.rename = _bluebird.Promise.promisify(fs.rename);
const mkdirs = exports.mkdirs = _bluebird.Promise.promisify(fs.mkdirs);
const remove = exports.remove = _bluebird.Promise.promisify(fs.remove);

const inspect = _bluebird.Promise.promisify(fs.stat);