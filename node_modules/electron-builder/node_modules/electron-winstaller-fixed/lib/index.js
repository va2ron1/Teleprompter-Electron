'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWindowsInstaller = undefined;

var _bluebird = require('bluebird');

let createWindowsInstaller = exports.createWindowsInstaller = (() => {
  var ref = (0, _bluebird.coroutine)(function* (options) {
    const useMono = process.platform !== 'win32';
    const appDirectory = options.appDirectory;


    const vendorPath = _path2.default.join(__dirname, '..', 'vendor');
    const appUpdate = _path2.default.join(appDirectory, 'Update.exe');

    yield fsUtils.copy(_path2.default.join(vendorPath, 'Update.exe'), appUpdate);
    if (options.setupIcon && options.skipUpdateIcon !== true) {
      let cmd = _path2.default.join(vendorPath, 'rcedit.exe');
      let args = [appUpdate, '--set-icon', options.setupIcon];

      if (useMono) {
        args.unshift(cmd);
        cmd = 'wine';
      }

      yield (0, _spawnPromise2.default)(cmd, args);
    }

    const metadata = {
      description: '',
      iconUrl: 'https://raw.githubusercontent.com/atom/electron/master/atom/browser/resources/win/atom.ico'
    };

    if (options.usePackageJson !== false) {
      const appResources = _path2.default.join(appDirectory, 'resources');
      const asarFile = _path2.default.join(appResources, 'app.asar');
      let appMetadata;

      if (yield fsUtils.fileExists(asarFile)) {
        appMetadata = JSON.parse(_asar2.default.extractFile(asarFile, 'package.json'));
      } else {
        appMetadata = JSON.parse((yield fsUtils.readFile(_path2.default.join(appResources, 'app', 'package.json'), 'utf8')));
      }

      Object.assign(metadata, {
        exe: `${ appMetadata.name }.exe`,
        title: appMetadata.productName || appMetadata.name
      }, appMetadata);
    }

    Object.assign(metadata, options);

    if (!metadata.authors) {
      if (typeof metadata.author === 'string') {
        metadata.authors = metadata.author;
      } else {
        metadata.authors = (metadata.author || {}).name || '';
      }
    }

    const baseSignOptions = options.certificateFile && options.certificatePassword ? Object.assign({
      cert: options.certificateFile,
      password: options.certificatePassword,
      hash: ['sha256'],
      name: metadata.title,
      overwrite: true
    }, options.sign) : null;

    yield signFile(appUpdate, baseSignOptions);

    const outputDirectory = _path2.default.resolve(options.outputDirectory || 'installer');
    if (options.remoteReleases) {
      let cmd = _path2.default.join(vendorPath, 'SyncReleases.exe');
      let args = ['-u', options.remoteReleases, '-r', outputDirectory];

      if (useMono) {
        args.unshift(cmd);
        cmd = 'mono';
      }

      if (options.remoteToken) {
        args.push('-t', options.remoteToken);
      }

      yield (0, _spawnPromise2.default)(cmd, args);
    }

    yield fsUtils.mkdirs(outputDirectory);
    const nupkgPath = _path2.default.join(outputDirectory, 'in.nupkg');
    yield pack(metadata, appDirectory, nupkgPath);
    yield releasify(nupkgPath, outputDirectory, options, vendorPath);

    const unfixedSetupPath = _path2.default.join(outputDirectory, 'Setup.exe');
    yield _bluebird.Promise.all([fsUtils.remove(nupkgPath), signFile(unfixedSetupPath, baseSignOptions)]);
    if (options.fixUpPaths !== false) {
      log('Fixing up paths');

      if (metadata.productName || options.setupExe) {
        const setupPath = _path2.default.join(outputDirectory, options.setupExe || `${ metadata.productName }Setup.exe`);
        log(`Renaming ${ unfixedSetupPath } => ${ setupPath }`);
        yield fsUtils.rename(unfixedSetupPath, setupPath);
      }

      if (metadata.productName) {
        const msiPath = _path2.default.join(outputDirectory, `${ metadata.productName }Setup.msi`);
        const unfixedMsiPath = _path2.default.join(outputDirectory, 'Setup.msi');
        if (yield fsUtils.fileExists(unfixedMsiPath)) {
          log(`Renaming ${ unfixedMsiPath } => ${ msiPath }`);
          yield fsUtils.rename(unfixedMsiPath, msiPath);
        }
      }
    }
  });
  return function createWindowsInstaller(_x) {
    return ref.apply(this, arguments);
  };
})();

let signFile = (() => {
  var ref = (0, _bluebird.coroutine)(function* (file, baseSignOptions) {
    if (process.platform === 'darwin' && baseSignOptions != null) {
      const signOptions = Object.assign({}, baseSignOptions);
      signOptions.path = file;
      yield sign(signOptions);
    }
  });
  return function signFile(_x2, _x3) {
    return ref.apply(this, arguments);
  };
})();

let releasify = (() => {
  var ref = (0, _bluebird.coroutine)(function* (nupkgPath, outputDirectory, options, vendorPath) {
    const isWindows = process.platform === 'win32';
    const cmd = isWindows ? _path2.default.join(vendorPath, 'Update.com') : 'mono';
    const args = ['--releasify', nupkgPath, '--releaseDir', outputDirectory, '--loadingGif', options.loadingGif ? _path2.default.resolve(options.loadingGif) : _path2.default.join(__dirname, '..', 'resources', 'install-spinner.gif')];

    if (!isWindows) {
      args.unshift(_path2.default.join(vendorPath, 'Update-Mono.exe'));
    }

    const certificateFile = options.certificateFile;
    const certificatePassword = options.certificatePassword;
    const signWithParams = options.signWithParams;

    if (isWindows) {
      if (signWithParams) {
        args.push('--signWithParams');
        args.push(signWithParams);
      } else if (certificateFile && certificatePassword) {
        args.push('--signWithParams');
        args.push(`/a /f "${ _path2.default.resolve(certificateFile) }" /p "${ certificatePassword }"`);
      }
    }

    if (options.setupIcon) {
      args.push('--setupIcon');
      args.push(_path2.default.resolve(options.setupIcon));
    }

    if (options.noMsi) {
      args.push('--no-msi');
    }

    yield (0, _spawnPromise2.default)(cmd, args);
  });
  return function releasify(_x4, _x5, _x6, _x7) {
    return ref.apply(this, arguments);
  };
})();

exports.convertVersion = convertVersion;

var _spawnPromise = require('./spawn-promise');

var _spawnPromise2 = _interopRequireDefault(_spawnPromise);

var _asar = require('asar');

var _asar2 = _interopRequireDefault(_asar);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsUtils = require('./fs-utils');

var fsUtils = _interopRequireWildcard(_fsUtils);

var _archiver = require('archiver');

var _archiver2 = _interopRequireDefault(_archiver);

var _fsExtra = require('fs-extra');

var fs = _interopRequireWildcard(_fsExtra);

var _signcodeTf = require('signcode-tf');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = require('debug')('electron-windows-installer');
const sign = _bluebird.Promise.promisify(_signcodeTf.sign);

function convertVersion(version) {
  const parts = version.split('-');
  const mainVersion = parts.shift();

  if (parts.length > 0) {
    return [mainVersion, parts.join('-').replace(/\./g, '')].join('-');
  } else {
    return mainVersion;
  }
}

function pack(metadata, appDirectory, outFile) {
  return new _bluebird.Promise(function (resolve, reject) {
    const archive = (0, _archiver2.default)('zip', { store: true });
    const out = fs.createWriteStream(outFile);
    out.on('close', function () {
      resolve(outFile);
    });
    archive.on('error', reject);
    archive.pipe(out);

    archive.directory(appDirectory, 'lib/net45');

    archive.append(`<?xml version="1.0"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
  <Relationship Id="Re0" Target="/${ metadata.name }.nuspec" Type="http://schemas.microsoft.com/packaging/2010/07/manifest"/>
  <Relationship Id="Re1" Target="/package/services/metadata/core-properties/1.psmdcp" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties"/>
</Relationships>`, { name: '.rels', prefix: '_rels' });

    const author = metadata.authors || metadata.owners;
    const copyright = metadata.copyright || `Copyright Â© ${ new Date().getFullYear() } ${ author }`;
    const version = convertVersion(metadata.version);
    const nuspecContent = `<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd">
  <metadata>
    <id>${ metadata.name }</id>
    <title>${ metadata.title }</title>
    <version>${ version }</version>
    <authors>${ author }</authors>
    <owners>${ metadata.owners || metadata.authors }</owners>
    <iconUrl>${ metadata.iconUrl }</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>${ metadata.description }</description>
    <copyright>${ copyright }</copyright>${ metadata.extraMetadataSpecs || '' }
  </metadata>
</package>`;
    log(`Created NuSpec file:\n${ nuspecContent }`);

    archive.append(nuspecContent, { name: metadata.name + '.nuspec' });

    archive.append(`<?xml version="1.0"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
  <Default ContentType="application/vnd.openxmlformats-package.relationships+xml" Extension="rels"/>
  <Default ContentType="application/octet" Extension="nuspec"/>
  <Default ContentType="application/octet" Extension="pak"/>
  <Default ContentType="application/octet" Extension="asar"/>
  <Default ContentType="application/octet" Extension="bin"/>
  <Default ContentType="application/octet" Extension="dll"/>
  <Default ContentType="application/octet" Extension="exe"/>
  <Default ContentType="application/octet" Extension="dat"/>
  <Default ContentType="application/vnd.openxmlformats-package.core-properties+xml" Extension="psmdcp"/>
</Types>`, { name: '[Content_Types].xml' });

    archive.append(`<?xml version="1.0"?>
<coreProperties xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns="http://schemas.openxmlformats.org/package/2006/metadata/core-properties">
  <dc:creator>${ author }</dc:creator>
  <dc:description>${ metadata.description }</dc:description>
  <dc:identifier>${ metadata.name }</dc:identifier>
  <keywords/>
  <lastModifiedBy>NuGet, Version=3.4.0.653, Culture=neutral, PublicKeyToken=31bf3856ad364e35;Unix 15.4.0.0;.NET Framework 4.5</lastModifiedBy>
  <dc:title>${ metadata.title }</dc:title>
  <version>${ version }</version>
</coreProperties>`, { name: '1.psmdcp', prefix: 'package/services/metadata/core-properties' });

    archive.finalize();
  });
}