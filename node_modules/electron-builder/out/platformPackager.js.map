{
  "version": 3,
  "file": "platformPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/platformPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { InfoRetriever, ProjectMetadataProvider } from \"./repositoryInfo\"\nimport { AppMetadata, DevMetadata, Platform, PlatformSpecificBuildOptions, getProductName } from \"./metadata\"\nimport EventEmitter = NodeJS.EventEmitter\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport packager = require(\"electron-packager-tf\")\nimport globby = require(\"globby\")\nimport { copy } from \"fs-extra-p\"\nimport { statOrNull, use } from \"./util\"\nimport { Packager } from \"./packager\"\nimport deepAssign = require(\"deep-assign\")\nimport { statFile } from \"asar\"\nimport ElectronPackagerOptions = ElectronPackager.ElectronPackagerOptions\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nconst pack = BluebirdPromise.promisify(packager)\n\nexport interface PackagerOptions {\n  arch?: string\n\n  dist?: boolean\n  githubToken?: string\n\n  sign?: string\n\n  platform?: Array<Platform>\n\n  // deprecated\n  appDir?: string\n\n  projectDir?: string\n\n  cscLink?: string\n  csaLink?: string\n  cscKeyPassword?: string\n\n  cscInstallerLink?: string\n  cscInstallerKeyPassword?: string\n\n  platformPackagerFactory?: (packager: Packager, platform: Platform, cleanupTasks: Array<() => Promise<any>>) => PlatformPackager<any>\n\n  /**\n   * The same as [development package.json](https://github.com/electron-userland/electron-builder/wiki/Options#development-packagejson).\n   *\n   * Development `package.json` will be still read, but options specified in this object will override.\n   */\n  readonly devMetadata?: DevMetadata\n}\n\nexport interface BuildInfo extends ProjectMetadataProvider {\n  options: PackagerOptions\n\n  devMetadata: DevMetadata\n\n  projectDir: string\n  appDir: string\n\n  electronVersion: string\n\n  repositoryInfo: InfoRetriever\n  eventEmitter: EventEmitter\n}\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> implements ProjectMetadataProvider {\n  protected readonly options: PackagerOptions\n\n  protected readonly projectDir: string\n  protected readonly buildResourcesDir: string\n\n  readonly metadata: AppMetadata\n  readonly devMetadata: DevMetadata\n\n  customBuildOptions: DC\n\n  readonly appName: string\n\n  public abstract get platform(): Platform\n\n  constructor(protected info: BuildInfo) {\n    this.options = info.options\n    this.projectDir = info.projectDir\n    this.metadata = info.metadata\n    this.devMetadata = info.devMetadata\n\n    this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n\n    this.customBuildOptions = (<any>info.devMetadata.build)[this.platform.buildConfigurationKey]\n\n    this.appName = getProductName(this.metadata, this.devMetadata)\n  }\n\n  protected get relativeBuildResourcesDirname() {\n    return use(this.devMetadata.directories, it => it.buildResources) || \"build\"\n  }\n\n  protected computeAppOutDir(outDir: string, arch: string): string {\n    return path.join(outDir, `${this.appName}-${this.platform.nodeName}-${arch}`)\n  }\n\n  protected dispatchArtifactCreated(file: string, artifactName?: string) {\n    this.info.eventEmitter.emit(\"artifactCreated\", {\n      file: file,\n      artifactName: artifactName,\n      platform: this.platform,\n    })\n  }\n\n  pack(outDir: string, arch: string, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    const appOutDir = this.computeAppOutDir(outDir, arch)\n    return this.doPack(this.computePackOptions(outDir, arch), outDir, appOutDir, arch, postAsyncTasks)\n  }\n\n  protected async doPack(options: ElectronPackagerOptions, outDir: string, appOutDir: string, arch: string, postAsyncTasks: Array<Promise<any>> = null) {\n    await this.packApp(options, appOutDir)\n    await this.copyExtraResources(appOutDir, arch)\n    if (postAsyncTasks != null && this.options.dist) {\n      postAsyncTasks.push(this.packageInDistributableFormat(outDir, appOutDir, arch))\n    }\n  }\n\n  protected computePackOptions(outDir: string, arch: string): ElectronPackagerOptions {\n    const version = this.metadata.version\n    let buildVersion = version\n    const buildNumber = this.computeBuildNumber()\n    if (buildNumber != null) {\n      buildVersion += \".\" + buildNumber\n    }\n\n    const options = deepAssign({\n      dir: this.info.appDir,\n      out: outDir,\n      name: this.appName,\n      platform: this.platform.nodeName,\n      arch: arch,\n      version: this.info.electronVersion,\n      icon: path.join(this.buildResourcesDir, \"icon\"),\n      asar: true,\n      overwrite: true,\n      \"app-version\": version,\n      \"build-version\": buildVersion,\n      tmpdir: false,\n      \"version-string\": {\n        CompanyName: this.metadata.author.name,\n        FileDescription: this.metadata.description,\n        ProductName: this.appName,\n        InternalName: this.appName,\n      }\n    }, this.devMetadata.build)\n\n    delete options.osx\n    delete options.win\n    delete options.linux\n    // this option only for windows-installer\n    delete options.iconUrl\n    return options\n  }\n\n  protected async packApp(options: ElectronPackagerOptions, appOutDir: string): Promise<any> {\n    await pack(options)\n    await this.sanityCheckPackage(appOutDir, options.asar)\n  }\n\n  protected getExtraResources(arch: string): Promise<Array<string>> {\n    const buildMetadata: any = this.devMetadata.build\n    let extraResources: Array<string> = buildMetadata == null ? null : buildMetadata.extraResources\n\n    const platformSpecificExtraResources = this.customBuildOptions == null ? null : this.customBuildOptions.extraResources\n    if (platformSpecificExtraResources != null) {\n      extraResources = extraResources == null ? platformSpecificExtraResources : extraResources.concat(platformSpecificExtraResources)\n    }\n\n    if (extraResources == null) {\n      return BluebirdPromise.resolve([])\n    }\n\n    const expandedPatterns = extraResources.map(it => it\n      .replace(/\\$\\{arch}/g, arch)\n      .replace(/\\$\\{os}/g, this.platform.buildConfigurationKey))\n    return globby(expandedPatterns, {cwd: this.projectDir})\n  }\n\n  protected async copyExtraResources(appOutDir: string, arch: string): Promise<Array<string>> {\n    let resourcesDir = appOutDir\n    if (this.platform === Platform.OSX) {\n      resourcesDir = this.getOSXResourcesDir(appOutDir)\n    }\n    return await BluebirdPromise.map(await this.getExtraResources(arch), it => copy(path.join(this.projectDir, it), path.join(resourcesDir, it)))\n  }\n\n  protected abstract packageInDistributableFormat(outDir: string, appOutDir: string, arch: string): Promise<any>\n\n  protected async computePackageUrl(): Promise<string> {\n    const url = this.metadata.homepage || this.devMetadata.homepage\n    if (url != null) {\n      return url\n    }\n\n    if (this.info.repositoryInfo != null) {\n      const info = await this.info.repositoryInfo.getInfo(this)\n      if (info != null) {\n        return `https://github.com/${info.user}/${info.project}`\n      }\n    }\n    return null\n  }\n\n  protected computeBuildNumber(): string {\n    return this.devMetadata.build[\"build-version\"] || process.env.TRAVIS_BUILD_NUMBER || process.env.APPVEYOR_BUILD_NUMBER || process.env.CIRCLE_BUILD_NUM\n  }\n\n  private getOSXResourcesDir(appOutDir: string): string {\n    return path.join(appOutDir, this.appName + \".app\", \"Contents\", \"Resources\")\n  }\n\n  private async statFileInPackage(appOutDir: string, packageFile: string, isAsar: boolean): Promise<any> {\n    const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, packageFile))\n    const resourcesDir = this.platform === Platform.OSX ? this.getOSXResourcesDir(appOutDir) : path.join(appOutDir, \"resources\")\n    if (isAsar) {\n      try {\n        const fsAsar = statFile(path.join(resourcesDir, \"app.asar\"), relativeFile)\n        return fsAsar != null\n      }\n      catch (e) {\n        // asar throws error on access to undefined object (info.link)\n        return false\n      }\n    }\n    else {\n      const outStat = await statOrNull(path.join(resourcesDir, \"app\", relativeFile))\n      return outStat != null && outStat.isFile()\n    }\n  }\n\n  private async sanityCheckPackage(appOutDir: string, asar: boolean): Promise<any> {\n    const outStat = await statOrNull(appOutDir)\n    if (outStat == null) {\n      throw new Error(`Output directory ${appOutDir} does not exists. Seems like a wrong configuration.`)\n    }\n    else if (!outStat.isDirectory()) {\n      throw new Error(`Output directory ${appOutDir} is not a directory. Seems like a wrong configuration.`)\n    }\n\n    const mainFile = this.metadata.main || \"index.js\"\n    const mainFileExists = await this.statFileInPackage(appOutDir, mainFile, asar)\n    if (!mainFileExists) {\n      throw new Error(`Application entry file ${mainFile} could not be found in package. Seems like a wrong configuration.`)\n    }\n  }\n}\n\nexport interface ArtifactCreated {\n  readonly file: string\n  readonly artifactName?: string\n\n  readonly platform: Platform\n}\n\nexport function normalizeTargets(targets: Array<string> | string): Array<string> {\n  if (targets == null) {\n    return null\n  }\n  else {\n    return (Array.isArray(targets) ? targets : [targets]).map(it => it.toLowerCase().trim())\n  }\n}"
  ]
}
