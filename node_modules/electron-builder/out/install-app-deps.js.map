{
  "version": 3,
  "file": "install-app-deps.js",
  "sourceRoot": "",
  "sources": [
    "../src/install-app-deps.ts"
  ],
  "names": [],
  "mappings": ";;;AAEA,uBAA0G,AAAQ,AAClH,AAAC;AAAD,0BAAkC,AAAW,AAC7C,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,MAAO,AAAG,cAAW,AAAmB,AAAC;AACzC,2BAA2C,AAAU,AACrD,AAAC,AAED,AAAmC;;AACnC,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AAEtC,MAAM,AAAI,OAAG,AAAG,IAAC,CAAC,EAAC,AAAI,MAAE,AAAM,QAAE,AAAI,MAAE,AAAM,AAAC,UAAE,EAAC,AAAI,MAAE,AAAQ,UAAE,AAAI,MAAE,AAAM,AAAC,AAAC,AAAC,WAAC,AAAK,AAAE;AAExF,MAAM,AAAU,aAAG,AAAO,QAAC,AAAG,AAAE;AAChC,MAAM,AAAc,iBAAG,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC;AAE5D;;AACE,cAAM,AAAW,cAAgB,MAAM,OAAe,gBAAC,AAAc,AAAC;AACtE,cAAM,AAAO,UAAkB,MAAM,WAAe,QAAC,AAAG,IAAC,CACvD,OAA0B,2BAAC,AAAU,YAAE,OAAG,IAAC,AAAW,YAAC,AAAW,aAAE,AAAE,MAAI,AAAE,GAAC,AAAG,AAAC,QAAI,AAAI,KAAC,AAAM,AAAC,SACjG,OAAkB,mBAAC,AAAW,aAAE,AAAc,AAAC,AAChD,AAAC;AAEF,cAAM,OAAmB,oBAAC,AAAO,QAAC,AAAC,AAAC,IAAE,AAAO,QAAC,AAAC,AAAC,IAAE,AAAI,KAAC,AAAI,AAAC,AAC9D,AAAC;;;AAED,IAAI,AAAC;AACH,AAAI,AAAE,AACR,AACA;SAAO,AAAC,AAAC,GAAC,AAAC;AACT,cAAiB,kBAAC,AAAC,AAAC,AACtB,AAAC;CAFD,AAAK,AAAC",
  "sourcesContent": [
    "#! /usr/bin/env node\n\nimport { computeDefaultAppDirectory, installDependencies, getElectronVersion, readPackageJson, use } from \"./util\"\nimport { printErrorAndExit } from \"./promise\"\nimport * as path from \"path\"\nimport cla = require(\"command-line-args\")\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { DevMetadata } from \"./metadata\";\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nconst args = cla([{name: \"arch\", type: String}, {name: \"appDir\", type: String}]).parse()\n\nconst projectDir = process.cwd()\nconst devPackageFile = path.join(projectDir, \"package.json\")\n\nasync function main() {\n  const devMetadata: DevMetadata = await readPackageJson(devPackageFile)\n  const results: Array<string> = await BluebirdPromise.all([\n    computeDefaultAppDirectory(projectDir, use(devMetadata.directories, it => it.app) || args.appDir),\n    getElectronVersion(devMetadata, devPackageFile)\n  ])\n\n  await installDependencies(results[0], results[1], args.arch)\n}\n\ntry {\n  main()\n}\ncatch (e) {\n  printErrorAndExit(e)\n}"
  ]
}
