{
  "version": 3,
  "file": "codeSign.js",
  "sourceRoot": "",
  "sources": [
    "../src/codeSign.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { exec } from \"./util\"\nimport { deleteFile } from \"fs-extra-p\"\nimport { download } from \"./httpRequest\"\nimport { tmpdir } from \"os\"\nimport * as path from \"path\"\nimport { executeFinally, all } from \"./promise\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { randomBytes } from \"crypto\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport interface CodeSigningInfo {\n  name: string\n  keychainName?: string\n\n  installerName?: string\n}\n\nfunction randomString(): string {\n  return randomBytes(8).toString(\"hex\")\n}\n\nexport function generateKeychainName(): string {\n  return \"csc-\" + randomString() + \".keychain\"\n}\n\nexport function createKeychain(keychainName: string, cscLink: string, cscKeyPassword: string, cscILink?: string, cscIKeyPassword?: string, csaLink?: string): Promise<CodeSigningInfo> {\n  const certLinks = [csaLink || \"https://developer.apple.com/certificationauthority/AppleWWDRCA.cer\"]\n  if (csaLink == null) {\n    certLinks.push(\"https://startssl.com/certs/sca.code2.crt\", \"https://startssl.com/certs/sca.code3.crt\")\n  }\n\n  certLinks.push(cscLink)\n  if (cscILink != null) {\n    certLinks.push(cscILink)\n  }\n\n  const certPaths = certLinks.map(it => path.join(tmpdir(), randomString() + (it.endsWith(\".cer\") ? \".cer\" : \".p12\")))\n  const keychainPassword = randomString()\n  return executeFinally(BluebirdPromise.all([\n      BluebirdPromise.map(certPaths, (p, i) => download(certLinks[i], p)),\n      BluebirdPromise.mapSeries([\n        [\"create-keychain\", \"-p\", keychainPassword, keychainName],\n        [\"unlock-keychain\", \"-p\", keychainPassword, keychainName],\n        [\"set-keychain-settings\", \"-t\", \"3600\", \"-u\", keychainName]\n      ], it => exec(\"security\", it))\n    ])\n    .then(() => importCerts(keychainName, certPaths, [cscKeyPassword, cscIKeyPassword].filter(it => it != null))),\n    errorOccurred => {\n      const tasks = certPaths.map(it => deleteFile(it, true))\n      if (errorOccurred) {\n        tasks.push(deleteKeychain(keychainName))\n      }\n      return all(tasks)\n    })\n}\n\nasync function importCerts(keychainName: string, paths: Array<string>, keyPasswords: Array<string>): Promise<CodeSigningInfo> {\n  for (let f of paths.slice(0, -keyPasswords.length)) {\n    await exec(\"security\", [\"import\", f, \"-k\", keychainName, \"-T\", \"/usr/bin/codesign\"])\n  }\n\n  const namePromises: Array<Promise<string>> = []\n  for (let i = paths.length - keyPasswords.length, j = 0; i < paths.length; i++, j++) {\n    const password = keyPasswords[j]\n    const certPath = paths[i]\n    await exec(\"security\", [\"import\", certPath, \"-k\", keychainName, \"-T\", \"/usr/bin/codesign\", \"-T\", \"/usr/bin/productbuild\", \"-P\", password])\n\n    namePromises.push(extractCommonName(password, certPath))\n  }\n\n  const names = await BluebirdPromise.all(namePromises)\n  return {\n    name: names[0],\n    installerName: names.length > 1 ? names[1] : null,\n    keychainName: keychainName,\n  }\n}\n\nfunction extractCommonName(password: string, certPath: string): BluebirdPromise<string> {\n  return exec(\"openssl\", [\"pkcs12\", \"-nokeys\", \"-nodes\", \"-passin\", \"pass:\" + password, \"-nomacver\", \"-clcerts\", \"-in\", certPath])\n    .then(result => {\n      const match = result[0].toString().match(/^subject.*\\/CN=([^\\/\\n]+)/m)\n      if (match == null || match[1] == null) {\n        throw new Error(\"Cannot extract common name from p12\")\n      }\n      else {\n        return match[1]\n      }\n    })\n}\n\nexport function sign(path: string, options: CodeSigningInfo): BluebirdPromise<any> {\n  const args = [\"--deep\", \"--force\", \"--sign\", options.name, path]\n  if (options.keychainName != null) {\n    args.push(\"--keychain\", options.keychainName)\n  }\n  return exec(\"codesign\", args)\n}\n\nexport function deleteKeychain(keychainName: string, ignoreNotFound: boolean = true): BluebirdPromise<any> {\n  const result = exec(\"security\", [\"delete-keychain\", keychainName])\n  if (ignoreNotFound) {\n    return result.catch(error => {\n      if (!error.message.includes(\"The specified keychain could not be found.\")) {\n        throw error\n      }\n    })\n  }\n  else {\n    return result\n  }\n}\n\nexport function downloadCertificate(cscLink: string): Promise<string> {\n  const certPath = path.join(tmpdir(), randomString() + \".p12\")\n  return download(cscLink, certPath)\n    .thenReturn(certPath)\n}\n"
  ]
}
