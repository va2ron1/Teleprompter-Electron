{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "",
  "sources": [
    "../src/metadata.ts"
  ],
  "names": [],
  "mappings": ";;AA6PA;AAKE,gBAAmB,AAAY,MAAS,AAA6B,uBAAS,AAAgB;AAA3E,aAAI,OAAJ,AAAI,AAAQ;AAAS,aAAqB,wBAArB,AAAqB,AAAQ;AAAS,aAAQ,WAAR,AAAQ,AAAQ,AAC9F,AAAC;;AAED,AAAQ;AACN,AAAM,eAAC,AAAI,KAAC,AAAI,AAClB,AAAC;;AAED,WAAc,AAAU,WAAC,AAAY;AACnC,AAAM,AAAC,gBAAC,AAAI,AAAC,AAAC,AAAC;AACb,iBAAK,AAAQ,SAAC,AAAG,IAAC,AAAQ,AAAC;AAC3B,iBAAK,AAAQ,SAAC,AAAG,IAAC,AAAI;AACpB,AAAM,uBAAC,AAAQ,SAAC,AAAG,AAErB;iBAAK,AAAQ,SAAC,AAAO,QAAC,AAAQ,AAAC;AAC/B,iBAAK,AAAQ,SAAC,AAAO,QAAC,AAAI,AAAC;AAC3B,iBAAK,AAAQ,SAAC,AAAO,QAAC,AAAqB;AACzC,AAAM,uBAAC,AAAQ,SAAC,AAAO;iBAEpB,AAAQ,SAAC,AAAK,MAAC,AAAQ;AAC1B,AAAM,uBAAC,AAAQ,SAAC,AAAK,AACzB,AAAC,MAFC;;AAIF,cAAM,IAAI,AAAK,MAAC,AAAoB,uBAAG,AAAI,AAAC,AAC9C,AAAC,AACH,AAAC;;;AA5Be,SAAG,MAAG,IAAI,AAAQ,SAAC,AAAK,OAAE,AAAK,OAAE,AAAQ,AAAC;AAC1C,SAAK,QAAG,IAAI,AAAQ,SAAC,AAAO,SAAE,AAAO,SAAE,AAAO,AAAC;AAC/C,SAAO,UAAG,IAAI,AAAQ,SAAC,AAAS,WAAE,AAAK,OAAE,AAAO,AAAC;AAHpD,QAAQ,WA6BpB;AAED,wBAA+B,AAAqB,UAAE,AAAwB;AAC5E,AAAM,WAAC,AAAW,YAAC,AAAK,MAAC,AAAW,eAAI,AAAQ,SAAC,AAAW,eAAI,AAAQ,SAAC,AAAI,AAC/E,AAAC;;AAFe,QAAc,iBAE7B",
  "sourcesContent": [
    "export interface Metadata {\n  readonly repository?: string | RepositoryInfo\n}\n\n/*\n # Application `package.json`\n */\nexport interface AppMetadata extends Metadata {\n  readonly version: string\n\n  /*\n   The application name.\n   */\n  readonly name: string\n\n  /*\n   As [name](#AppMetadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters\n   not allowed in the [name property](https://docs.npmjs.com/files/package.json#name}).\n   */\n  readonly productName?: string\n\n  /*\n   The application description.\n   */\n  readonly description: string\n\n  readonly main?: string\n\n  readonly author: AuthorMetadata\n\n  /*\n   The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\n   If not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.\n   */\n  readonly homepage?: string\n\n  /*\n   *linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.\n   */\n  readonly license?: string\n}\n\n/*\n # Development `package.json`\n */\nexport interface DevMetadata extends Metadata {\n  /*\n   See [.build](#BuildMetadata).\n   */\n  readonly build: BuildMetadata\n\n  // deprecated\n  readonly homepage?: string\n\n  // deprecated\n  readonly license?: string\n\n  /*\n   See [.directories](#MetadataDirectories)\n   */\n  readonly directories?: MetadataDirectories\n}\n\nexport interface RepositoryInfo {\n  readonly url: string\n}\n\nexport interface AuthorMetadata {\n  readonly name: string\n  readonly email: string\n}\n\n/*\n ## `.build`\n */\nexport interface BuildMetadata {\n  /*\n   *OS X-only.* The app bundle ID. See [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070).\n   */\n  readonly \"app-bundle-id\"?: string\n  /*\n   *OS X-only.* The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\n   For example, `app-category-type=public.app-category.developer-tools` will set the application category to *Developer Tools*.\n\n   Valid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).\n   */\n  readonly \"app-category-type\"?: string\n\n  /*\n   Whether to package the application's source code into an archive, using [Electron's archive format](https://github.com/electron/asar). Defaults to `true`.\n    Reasons why you may want to disable this feature are described in [an application packaging tutorial in Electron's documentation](http://electron.atom.io/docs/latest/tutorial/application-packaging/#limitations-on-node-api/).\n   */\n  readonly asar?: boolean\n\n  /*\n   *windows-only.* A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\n   Please note â€” [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\n   * If you don't plan to build windows installer, you can omit it.\n   * If your project repository is public on GitHub, it will be `https://raw.githubusercontent.com/${u}/${p}/master/build/icon.ico` by default.\n   */\n  readonly iconUrl?: string\n\n  /*\n   See [AppMetadata.productName](#AppMetadata-productName).\n   */\n  readonly productName?: string\n\n  /**\n   A [glob expression](https://www.npmjs.com/package/glob#glob-primer), when specified, copy the file or directory with matching names directly into the app's directory (`Contents/Resources` for OS X).\n\n   You can use `${os}` (expanded to osx, linux or win according to current platform) and `${arch}` in the pattern.\n\n   If directory matched, all contents are copied. So, you can just specify `foo` to copy `<project_dir>/foo` directory.\n\n   May be specified in the platform options (i.e. in the `build.osx`).\n   */\n  readonly extraResources?: Array<string>\n\n  /*\n   See [.build.osx](#OsXBuildOptions).\n   */\n  readonly osx?: OsXBuildOptions\n\n  /**\n   See [.build.win](#LinuxBuildOptions).\n   */\n  readonly win?: any,\n\n  /*\n   See [.build.linux](#LinuxBuildOptions).\n   */\n  readonly linux?: LinuxBuildOptions\n\n  /*\n   The compression level, one of `store`, `normal`, `maximum` (default: `normal`). If you want to rapidly test build, `store` can reduce build time significantly.\n   */\n  readonly compression?: \"store\" | \"normal\" | \"maximum\"\n\n  readonly \"build-version\"?: string\n}\n\n/*\n ### `.build.osx`\n\n See all [appdmg options](https://www.npmjs.com/package/appdmg#json-specification).\n */\nexport interface OsXBuildOptions extends PlatformSpecificBuildOptions {\n  /*\n   The path to icon, which will be shown when mounted (default: `build/icon.icns`).\n   */\n  readonly icon?: string\n\n  /*\n   The path to background (default: `build/background.png`). The resolution of this file determines the resolution of the installer window.\n   */\n  readonly background?: string\n\n  /*\n   Target package type: list of `default`, `dmg`, `zip`, `mas`, `7z`.\n  */\n  readonly target?: Array<string>\n}\n\n/*\n ### `.build.win`\n\n See all [windows-installer options](https://github.com/electron/windows-installer#usage).\n */\nexport interface WinBuildOptions extends PlatformSpecificBuildOptions {\n  readonly certificateFile?: string\n  readonly certificatePassword?: string\n\n  readonly iconUrl?: string\n\n  /*\n   The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists\n   (otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).\n   */\n  readonly loadingGif?: string\n\n  /**\n   Whether to create an MSI installer. Defaults to `true` (MSI is not created).\n   */\n  readonly noMsi?: boolean\n}\n\n/*\n ### `.build.linux`\n */\nexport interface LinuxBuildOptions {\n  /*\n   As [description](#AppMetadata-description) from application package.json, but allows you to specify different for Linux.\n   */\n  description?: string\n\n  /*\n   *deb-only.* The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).\n   */\n  synopsis?: string\n\n  /*\n   The maintainer. Defaults to [author](#AppMetadata-author).\n   */\n  maintainer?: string\n\n  /*\n   The vendor. Defaults to [author](#AppMetadata-author).\n   */\n  vendor?: string\n\n  // should be not documented, only to experiment\n  fpm?: string[]\n\n  //.desktop file template\n  desktop?: string\n\n  afterInstall?: string\n  afterRemove?: string\n\n  /*\n  *deb-only.* The compression type, one of `gz`, `bzip2`, `xz` (default: `xz`).\n   */\n  readonly compression?: string\n}\n\n/*\n ## `.directories`\n */\nexport interface MetadataDirectories {\n  /*\n   The path to build resources, default `build`.\n   */\n  readonly buildResources?: string\n\n  /*\n   The output directory, default `dist`.\n   */\n  readonly output?: string\n\n  /*\n   The application directory (containing the application package.json), default `app`, `www` or working directory.\n   */\n  readonly app?: string\n}\n\nexport interface PlatformSpecificBuildOptions {\n  readonly extraResources?: Array<string>\n}\n\nexport class Platform {\n  public static OSX = new Platform(\"osx\", \"osx\", \"darwin\")\n  public static LINUX = new Platform(\"linux\", \"linux\", \"linux\")\n  public static WINDOWS = new Platform(\"windows\", \"win\", \"win32\")\n\n  constructor(public name: string, public buildConfigurationKey: string, public nodeName: string) {\n  }\n\n  toString() {\n    return this.name\n  }\n\n  public static fromString(name: string): Platform {\n    switch (name) {\n      case Platform.OSX.nodeName:\n      case Platform.OSX.name:\n        return Platform.OSX\n\n      case Platform.WINDOWS.nodeName:\n      case Platform.WINDOWS.name:\n      case Platform.WINDOWS.buildConfigurationKey:\n        return Platform.WINDOWS\n\n      case Platform.LINUX.nodeName:\n        return Platform.LINUX\n    }\n\n    throw new Error(\"Unknown platform: \" + name)\n  }\n}\n\nexport function getProductName(metadata: AppMetadata, devMetadata: DevMetadata) {\n  return devMetadata.build.productName || metadata.productName || metadata.name\n}"
  ]
}
