{
  "version": 3,
  "file": "build-cli.js",
  "sourceRoot": "",
  "sources": [
    "../src/build-cli.ts"
  ],
  "names": [],
  "mappings": ";;;AAGA,0BAAsB,AAAW,AACjC,AAAC;AACD,0BAAkC,AAAW,AAC7C,AAAC;AAAD,MAAO,AAAG,cAAW,AAAmB,AAAC;AACzC,qBAA6B,AAAI,AACjC,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,uBAAqB,AAAQ,AAE7B,AAAmC,AACnC,AAAC;;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AAMtC,MAAM,AAAG,MAAG,AAAG,IAAC,CACd,EAAC,AAAI,MAAE,AAAM,QAAE,AAAI,MAAE,AAAO,SAAE,AAAK,OAAE,AAAG,KAAE,AAAW,aAAE,AAA4F,AAAC,gGACpJ,EAAC,AAAI,MAAE,AAAS,WAAE,AAAI,MAAE,AAAM,QAAE,AAAK,OAAE,AAAG,KAAE,AAAW,aAAE,AAA4H,AAAC,gIACtL,EAAC,AAAI,MAAE,AAAU,YAAE,AAAI,MAAE,AAAM,QAAE,AAAQ,UAAE,AAAI,MAAE,AAAW,aAAE,AAAiD,oDAAG,AAAO,QAAC,AAAQ,WAAG,AAAe,AAAC,mBACrJ,EAAC,AAAI,MAAE,AAAM,QAAE,AAAI,MAAE,AAAM,QAAE,AAAW,aAAE,AAA+D,AAAC,mEAC1G,EAAC,AAAI,MAAE,AAAM,QAAE,AAAI,MAAE,AAAM,AAAC,UAC5B,EAAC,AAAI,MAAE,AAAM,QAAE,AAAK,OAAE,AAAG,KAAE,AAAI,MAAE,AAAO,SAAE,AAAW,aAAE,AAA2B,AAAC,+BACnF,EAAC,AAAI,MAAE,AAAQ,UAAE,AAAI,MAAE,AAAM,AAAC,AAC/B,AAAC;AAEF,MAAM,AAAI,OAAe,AAAG,IAAC,AAAK,AAAE;AAEpC,AAAE,AAAC,IAAC,AAAI,KAAC,AAAI,AAAC;AACZ,UAAM,AAAO,UAAG,AAAO,QAAC,AAAG,IAAC,AAAmB,uBAAI,AAAI,KAAC,AAAK,MAAC,KAAY,aAAC,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAI,MAAE,AAAc,AAAC,iBAAE,AAAM,AAAC,AAAC,SAAC,AAAO;AACvI,AAAO,YAAC,AAAG,QAAK,AAAQ,SAAC;AACvB,AAAK,eAAE,AAAmB,sBAAG,AAAO;AACpC,AAAM,gBAAE,AAAkF;AAC1F,AAAI,cAAE,CAAC,AAAQ,AAAC,AACjB,AAAC,AAAC,AACL,AAAC,AACD,AAAI;KANU,AAAG,GAFF,AAAC;OAQX,AAAC;AACJ,AAAE,AAAC,QAAC,AAAI,KAAC,AAAM,AAAC,QAAC,AAAC;AAChB,eAAI,KAAC,CACsF,AAAC,AAC9F,AAAC;;;AAED,cAAK,MAAC,AAAI,AAAC,MACR,AAAK,MAAC,UAAiB,AAAC,AAC7B,AAAC",
  "sourcesContent": [
    "#! /usr/bin/env node\n\nimport { PackagerOptions } from \"./platformPackager\"\nimport { build } from \"./builder\"\nimport { PublishOptions } from \"./gitHubPublisher\"\nimport { printErrorAndExit } from \"./promise\"\nimport cla = require(\"command-line-args\")\nimport { readFileSync } from \"fs\"\nimport * as path from \"path\"\nimport { warn } from \"./util\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\ninterface CliOptions extends PackagerOptions, PublishOptions {\n  help: boolean\n}\n\nconst cli = cla([\n  {name: \"dist\", type: Boolean, alias: \"d\", description: \"Whether to package in a distributable format (e.g. DMG, windows installer, NuGet package).\"},\n  {name: \"publish\", type: String, alias: \"p\", description: \"Publish artifacts (to GitHub Releases): onTag (on tag push only) or onTagOrDraft (on tag push or if draft release exists).\"},\n  {name: \"platform\", type: String, multiple: true, description: \"darwin, linux, win32 or all. Current platform (\" + process.platform + \") by default.\"},\n  {name: \"arch\", type: String, description: \"ia32, x64 or all. Defaults to architecture you're running on.\"},\n  {name: \"sign\", type: String},\n  {name: \"help\", alias: \"h\", type: Boolean, description: \"Display this usage guide.\"},\n  {name: \"appDir\", type: String}\n])\n\nconst args: CliOptions = cli.parse()\n\nif (args.help) {\n  const version = process.env.npm_package_version || JSON.parse(readFileSync(path.join(__dirname, \"..\", \"package.json\"), \"utf8\")).version\n  console.log(cli.getUsage({\n    title: \"electron-builder \" + version,\n    footer: \"Project home: [underline]{https://github.com/electron-userland/electron-builder}\",\n    hide: [\"appDir\"],\n  }))\n}\nelse {\n  if (args.appDir) {\n    warn(`-appDir CLI parameter is deprecated, please configure build.directories.app instead \nSee https://github.com/electron-userland/electron-builder/wiki/Options#MetadataDirectories-app`)\n  }\n\n  build(args)\n    .catch(printErrorAndExit)\n}"
  ]
}
