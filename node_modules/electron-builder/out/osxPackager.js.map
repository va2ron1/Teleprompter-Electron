{
  "version": 3,
  "file": "osxPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/osxPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { PlatformPackager, BuildInfo, normalizeTargets } from \"./platformPackager\"\nimport { Platform, OsXBuildOptions } from \"./metadata\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { log, debug, spawn, statOrNull } from \"./util\"\nimport { createKeychain, deleteKeychain, CodeSigningInfo, generateKeychainName } from \"./codeSign\"\nimport { path7za } from \"7zip-bin\"\nimport deepAssign = require(\"deep-assign\")\nimport { sign, flat, BaseSignOptions } from \"electron-osx-sign-tf\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport default class OsXPackager extends PlatformPackager<OsXBuildOptions> {\n  codeSigningInfo: Promise<CodeSigningInfo>\n\n  readonly targets: Array<string>\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    if (this.options.cscLink != null && this.options.cscKeyPassword != null) {\n      const keychainName = generateKeychainName()\n      cleanupTasks.push(() => deleteKeychain(keychainName))\n      this.codeSigningInfo = createKeychain(keychainName, this.options.cscLink, this.options.cscKeyPassword, this.options.cscInstallerLink, this.options.cscInstallerKeyPassword, this.options.csaLink)\n    }\n    else {\n      this.codeSigningInfo = BluebirdPromise.resolve(null)\n    }\n\n    const targets = normalizeTargets(this.customBuildOptions == null ? null : this.customBuildOptions.target)\n    if (targets != null) {\n      for (let target of targets) {\n        if (target !== \"default\" && target !== \"dmg\" && target !== \"zip\" && target !== \"mas\" && target !== \"7z\") {\n          throw new Error(\"Unknown target: \" + target)\n        }\n      }\n    }\n    this.targets = targets == null ? [\"default\"] : targets\n  }\n\n  get platform() {\n    return Platform.OSX\n  }\n\n  async pack(outDir: string, arch: string, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    const packOptions = this.computePackOptions(outDir, arch)\n    let nonMasPromise: Promise<any> = null\n    if (this.targets.length > 1 || this.targets[0] !== \"mas\") {\n      const appOutDir = this.computeAppOutDir(outDir, arch)\n      nonMasPromise = this.doPack(packOptions, outDir, appOutDir, arch)\n        .then(() => this.sign(appOutDir, false))\n        .then(() => postAsyncTasks.push(this.packageInDistributableFormat(outDir, appOutDir, arch)))\n    }\n\n    if (this.targets.includes(\"mas\")) {\n      // osx-sign - disable warning\n      const appOutDir = path.join(outDir, `${this.appName}-mas-${arch}`)\n      await this.doPack(Object.assign({}, packOptions, {platform: \"mas\", \"osx-sign\": false}), outDir, appOutDir, arch)\n      await this.sign(appOutDir, true)\n    }\n\n    if (nonMasPromise != null) {\n      await nonMasPromise\n    }\n  }\n\n  private async sign(appOutDir: string, isMas: boolean): Promise<any> {\n    let codeSigningInfo = await this.codeSigningInfo\n    if (codeSigningInfo == null) {\n      codeSigningInfo = {\n        name: this.options.sign || process.env.CSC_NAME,\n        installerName: this.options.sign || process.env.CSC_INSTALLER_NAME,\n      }\n    }\n\n    if (codeSigningInfo.name == null) {\n      log(\"App is not signed: CSC_LINK or CSC_NAME are not specified\")\n      return\n    }\n\n    log(\"Signing app\")\n\n    const baseSignOptions: BaseSignOptions = {\n      app: path.join(appOutDir, this.appName + \".app\"),\n      platform: isMas ? \"mas\" : \"darwin\"\n    }\n    if (codeSigningInfo.keychainName != null) {\n      baseSignOptions.keychain = codeSigningInfo.keychainName\n    }\n\n    await BluebirdPromise.promisify(sign)(Object.assign({\n      identity: codeSigningInfo.name,\n    }, (<any>this.devMetadata.build)[\"osx-sign\"], baseSignOptions))\n\n    if (isMas) {\n      const installerIdentity = codeSigningInfo.installerName\n      if (installerIdentity == null) {\n        throw new Error(\"Signing is required for mas builds but CSC_INSTALLER_LINK or CSC_INSTALLER_NAME are not specified\")\n      }\n\n      const pkg = path.join(appOutDir, `${this.appName}-${this.metadata.version}.pkg`)\n      await BluebirdPromise.promisify(flat)(Object.assign({\n        pkg: pkg,\n        identity: installerIdentity,\n      }, baseSignOptions))\n      this.dispatchArtifactCreated(pkg, `${this.metadata.name}-${this.metadata.version}.pkg`)\n    }\n  }\n\n  protected async computeEffectiveDistOptions(appOutDir: string): Promise<appdmg.Specification> {\n    const specification: appdmg.Specification = deepAssign({\n      title: this.appName,\n      icon: path.join(this.buildResourcesDir, \"icon.icns\"),\n      \"icon-size\": 80,\n      contents: [\n        {\n          \"x\": 410, \"y\": 220, \"type\": \"link\", \"path\": \"/Applications\"\n        },\n        {\n          \"x\": 130, \"y\": 220, \"type\": \"file\"\n        }\n      ]\n    }, this.customBuildOptions)\n\n    if (this.customBuildOptions == null || !(\"background\" in this.customBuildOptions)) {\n      const background = path.join(this.buildResourcesDir, \"background.png\")\n      const info = await statOrNull(background)\n      if (info != null && info.isFile()) {\n        specification.background = background\n      }\n    }\n\n    specification.contents[1].path = path.join(appOutDir, this.appName + \".app\")\n    return specification\n  }\n\n  packageInDistributableFormat(outDir: string, appOutDir: string, arch: string): Promise<any> {\n    const promises: Array<Promise<any>> = []\n\n    if (this.targets.includes(\"dmg\") || this.targets.includes(\"default\")) {\n      const artifactPath = path.join(appOutDir, `${this.appName}-${this.metadata.version}.dmg`)\n      promises.push(new BluebirdPromise<any>(async(resolve, reject) => {\n        log(\"Creating DMG\")\n        const dmgOptions = {\n          target: artifactPath,\n          basepath: this.projectDir,\n          specification: await this.computeEffectiveDistOptions(appOutDir),\n          compression: this.devMetadata.build.compression === \"store\" ? \"NONE\" : \"UDBZ\"\n        }\n\n        if (debug.enabled) {\n          debug(`appdmg: ${JSON.stringify(dmgOptions, null, 2)}`)\n        }\n\n        const emitter = require(\"appdmg-tf\")(dmgOptions)\n        emitter.on(\"error\", reject)\n        emitter.on(\"finish\", () => resolve())\n        if (debug.enabled) {\n          emitter.on(\"progress\", (info: any) => {\n            if (info.type === \"step-begin\") {\n              debug(`appdmg: [${info.current}] ${info.title}`)\n            }\n          })\n        }\n      })\n        .then(() => this.dispatchArtifactCreated(artifactPath, `${this.metadata.name}-${this.metadata.version}.dmg`)))\n    }\n\n    for (let target of this.targets) {\n      if (target !== \"mas\" && target !== \"dmg\") {\n        const format = target === \"default\" ? \"zip\" : target\n        log(\"Creating OS X \" + format)\n        // for default we use mac to be compatible with Squirrel.Mac\n        const classifier = target === \"default\" ? \"mac\" : \"osx\"\n        promises.push(this.archiveApp(appOutDir, format, classifier)\n          .then(it => this.dispatchArtifactCreated(it, `${this.metadata.name}-${this.metadata.version}-${classifier}.${format}`)))\n      }\n    }\n    return BluebirdPromise.all(promises)\n  }\n\n  private archiveApp(outDir: string, format: string, classifier: string): Promise<string> {\n    const args = [\"a\", \"-bb\" + (debug.enabled ? \"3\" : \"0\"), \"-bd\"]\n    const compression = this.devMetadata.build.compression\n    const storeOnly = compression === \"store\"\n    if (format === \"zip\" || storeOnly) {\n      args.push(\"-mm=\" + (storeOnly ? \"Copy\" : \"Deflate\"))\n    }\n    if (compression === \"maximum\") {\n      // http://superuser.com/a/742034\n      //noinspection SpellCheckingInspection\n      args.push(\"-mfb=258\", \"-mpass=15\")\n    }\n\n    // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204\n    const resultPath = `${this.appName}-${this.metadata.version}-${classifier}.${format}`\n    args.push(resultPath, this.appName + \".app\")\n\n    return spawn(path7za, args, {\n      cwd: outDir,\n      stdio: [\"ignore\", debug.enabled ? \"inherit\" : \"ignore\", \"inherit\"],\n    })\n      .thenReturn(path.join(outDir, resultPath))\n  }\n}"
  ]
}
