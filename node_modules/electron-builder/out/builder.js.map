{
  "version": 3,
  "file": "builder.js",
  "sourceRoot": "",
  "sources": [
    "../src/builder.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Packager, normalizePlatforms } from \"./packager\"\nimport { PackagerOptions } from \"./platformPackager\"\nimport { PublishOptions, Publisher, GitHubPublisher } from \"./gitHubPublisher\"\nimport { executeFinally } from \"./promise\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { InfoRetriever } from \"./repositoryInfo\"\nimport { log } from \"./util\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport async function createPublisher(packager: Packager, options: BuildOptions, repoSlug: InfoRetriever, isPublishOptionGuessed: boolean = false): Promise<Publisher> {\n  const info = await repoSlug.getInfo(packager)\n  if (info == null) {\n    if (isPublishOptionGuessed) {\n      return null\n    }\n\n    log(\"Cannot detect repository by .git/config\")\n    throw new Error(\"Please specify 'repository' in the dev package.json ('\" + packager.devPackageFile + \"')\")\n  }\n  else {\n    return new GitHubPublisher(info.user, info.project, packager.metadata.version, options.githubToken, options.publish !== \"onTagOrDraft\")\n  }\n}\n\nexport interface BuildOptions extends PackagerOptions, PublishOptions {\n}\n\nexport async function build(originalOptions?: BuildOptions): Promise<void> {\n  const options = Object.assign({\n    cscLink: process.env.CSC_LINK,\n    csaLink: process.env.CSA_LINK,\n    cscKeyPassword: process.env.CSC_KEY_PASSWORD,\n    githubToken: process.env.GH_TOKEN || process.env.GH_TEST_TOKEN,\n  }, originalOptions)\n\n  options.platform = normalizePlatforms(originalOptions.platform)\n\n  const lifecycleEvent = process.env.npm_lifecycle_event\n  if (options.publish) {\n    options.dist = true\n  }\n  else if (options.dist === undefined) {\n    options.dist = lifecycleEvent === \"dist\" || lifecycleEvent === \"build\" || (lifecycleEvent != null && lifecycleEvent.startsWith(\"dist:\"))\n  }\n\n  let isPublishOptionGuessed = false\n  if (options.publish === undefined) {\n    if (lifecycleEvent === \"release\") {\n      options.publish = \"always\"\n    }\n    else if (options.githubToken != null) {\n      const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG\n      if (tag != null && tag.length !== 0) {\n        log(\"Tag %s is defined, so artifacts will be published\", tag)\n        options.publish = \"onTag\"\n        isPublishOptionGuessed = true\n      }\n      else if ((process.env.TRAVIS || process.env.APPVEYOR || process.env.CIRCLECI || \"\").toLowerCase() === \"true\") {\n        log(\"CI detected, so artifacts will be published if draft release exists\")\n        options.publish = \"onTagOrDraft\"\n        isPublishOptionGuessed = true\n      }\n    }\n  }\n\n  const publishTasks: Array<BluebirdPromise<any>> = []\n  const repositoryInfo = new InfoRetriever()\n  const packager = new Packager(options, repositoryInfo)\n  if (options.publish != null && options.publish !== \"never\") {\n    let publisher: BluebirdPromise<Publisher> = null\n    packager.artifactCreated(event => {\n      if (publisher == null) {\n        publisher = <BluebirdPromise<Publisher>>createPublisher(packager, options, repositoryInfo, isPublishOptionGuessed)\n      }\n\n      if (publisher != null) {\n        publisher\n          .then(it => publishTasks.push(<BluebirdPromise<any>>it.upload(event.file, event.artifactName)))\n      }\n    })\n  }\n\n  await executeFinally(packager.build(), errorOccurred => {\n    if (errorOccurred) {\n      for (let task of publishTasks) {\n        task.cancel()\n      }\n      return BluebirdPromise.resolve(null)\n    }\n    else {\n      return BluebirdPromise.all(publishTasks)\n    }\n  })\n}"
  ]
}
